{"version":3,"sources":["components/Square/Square.js","components/SettingsBar/SettingsBar.js","App.js","index.js"],"names":["Square","coords","x","y","settings","backgroundColors","degs","duration","size","animate","background","rotate","borderRadius","transition","loop","Infinity","repeatType","ease","type","center","radius","SettingsBar","setSettings","handleChange","val","field","value","onChange","e","target","arrNumPoints","Array","from","length","_","i","circleCoords","rad","Math","PI","push","cos","sin","getCoords","coordsOrdered","ratio","copy","concat","splice","convert","map","set","App","useState","className","point","rootElement","document","getElementById","render"],"mappings":"uKA6BeA,EA3BA,SAAC,GAGT,IAAD,gBAFJC,OAEI,GAFKC,EAEL,KAFQC,EAER,SADJC,SAAYC,EACR,EADQA,iBAAkBC,EAC1B,EAD0BA,KAAMC,EAChC,EADgCA,SAAUC,EAC1C,EAD0CA,KAE9C,OACE,cAAC,QAAD,CACEC,QAAS,CACPC,WAAYL,EACZM,OAAQL,EACRJ,EAAGA,EACHC,EAAGA,EACHS,aAAc,CAAC,KAAM,MAAO,MAAO,MAAO,OAE5CC,WAAY,CACVN,SAAUA,EACVO,KAAMC,IACNC,WAAY,SACZC,KAAM,SACNC,KAAM,UAERV,KAAMA,EACNW,QAAM,EACNC,OAAQ,S,gBCoDCC,G,OAjEK,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAalB,EAAe,EAAfA,SAC5BmB,EAAe,SAACC,EAAKC,GACzBH,EAAY,2BACPlB,GADM,kBAERqB,EAAQD,MAIb,OACE,8BACE,iCACE,qDAEE,uBACEN,KAAK,SACLQ,MAxBM,GAyBNC,SAAU,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,MAAO,mBAGlD,2CAEE,uBACER,KAAK,SACLQ,MA/BG,IAgCHC,SAAU,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,MAAO,gBAGlD,yCAEE,uBACER,KAAK,SACLQ,MAtCC,GAuCDC,SAAU,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,MAAO,cAGlD,0CAEE,uBACER,KAAK,SACLQ,MA7CK,EA8CLC,SAAU,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,MAAO,yBCxCpDrB,G,OAAmB,CAAC,OAAQ,OAAQ,OAAQ,YAAY,SACxDC,EAAO,CAAC,EAAG,GAAI,IAAK,KAEpBwB,EAAeC,MAAMC,KAAK,CAAEC,OAPhB,KAOqC,SAACC,EAAGC,GAAJ,OAAUA,KAE3DC,EAAe,WAEnB,IADA,IAAInC,EAAS,GACJkC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAME,EAAOF,EAAIG,KAAKC,GAAM,IAC5BtC,EAAOuC,KAAK,CAZN,IAYOF,KAAKG,IAAIJ,GAZhB,IAY0BC,KAAKI,IAAIL,KAE3C,OAAOpC,GAMH0C,EAAY,SAACR,GACjB,IAAMS,EAJQ,SAACC,GAAD,IAAQC,EAAR,uDAAeV,IAAf,OACdU,EAAKC,OAAOD,EAAKE,OAAO,EAAW,IAARH,IAGLI,CAAQd,EAtBd,IA0BhB,MAAO,CAHGS,EAAcM,KAAI,SAACC,GAAD,OAASA,EAAI,MAC/BP,EAAcM,KAAI,SAACC,GAAD,OAASA,EAAI,QAyB5BC,MApBf,WACE,MAAgCC,mBAAS,CACvChD,mBACAC,OACAC,SA9Ba,EA+BbC,KAhCS,KA4BX,mBAAOJ,EAAP,KAAiBkB,EAAjB,KAMA,OACE,sBAAKgC,UAAU,MAAf,UACE,qBAAKA,UAAU,qBAAf,SACGxB,EAAaoB,KAAI,SAACK,GAAD,OAChB,cAAC,EAAD,CAAQtD,OAAQ0C,EAAUY,GAAoBnD,SAAUA,GAAjBmD,QAI3C,cAAC,EAAD,CAAanD,SAAUA,EAAUkB,YAAaA,QC9C9CkC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAAC,EAAD,IAASH,K","file":"static/js/main.a9c18791.chunk.js","sourcesContent":["import { Frame } from \"framer\";\n\nconst Square = ({\n  coords: [x, y],\n  settings: { backgroundColors, degs, duration, size },\n}) => {\n  return (\n    <Frame\n      animate={{\n        background: backgroundColors,\n        rotate: degs,\n        x: x,\n        y: y,\n        borderRadius: [\"0%\", \"40%\", \"50%\", \"40%\", \"0%\"],\n      }}\n      transition={{\n        duration: duration,\n        loop: Infinity,\n        repeatType: \"mirror\",\n        ease: \"linear\",\n        type: \"spring\",\n      }}\n      size={size}\n      center\n      radius={\"50%\"}\n    />\n  );\n};\n\nexport default Square;\n","import { SketchPicker } from \"react-color\";\n\nconst numPoints = 15;\nconst radius = 120;\nconst size = 20;\nconst duration = 5;\nconst colors = [\"#F05\", \"#85F\", \"#0CF\", \"\t#32CD32\", \"#F05\"];\nconst degs = [0, 180, 360];\n\nconst numColors = 5;\n\nconst SettingsBar = ({ setSettings, settings }) => {\n  const handleChange = (val, field) => {\n    setSettings({\n      ...settings,\n      [field]: val,\n    });\n  };\n\n  return (\n    <div>\n      <form>\n        <label>\n          Number of Points\n          <input\n            type=\"number\"\n            value={numPoints}\n            onChange={(e) => handleChange(e.target.value, \"numPoints\")}\n          />\n        </label>\n        <label>\n          Radius\n          <input\n            type=\"number\"\n            value={radius}\n            onChange={(e) => handleChange(e.target.value, \"radius\")}\n          />\n        </label>\n        <label>\n          Size\n          <input\n            type=\"number\"\n            value={size}\n            onChange={(e) => handleChange(e.target.value, \"size\")}\n          />\n        </label>\n        <label>\n          Speed\n          <input\n            type=\"number\"\n            value={duration}\n            onChange={(e) => handleChange(e.target.value, \"duration\")}\n          />\n        </label>\n        {/* {[...Array(numColors).keys()].map((i) => {\n          return (\n            <label>\n              Color #{i}\n              <SketchPicker\n                color={settings.colors[i]}\n                key={i}\n                onChange={(color, e) =>\n                  handleChange(\n                    [...settings.colors.splice(i, 0, color.hex)],\n                    \"colors\"\n                  )\n                }\n              />\n            </label>\n          );\n        })} */}\n      </form>\n    </div>\n  );\n};\n\nexport default SettingsBar;\n","import React, { useState } from \"react\";\nimport { Frame } from \"framer\";\n\nimport Square from \"./components/Square/Square.js\";\nimport SettingsBar from \"./components/SettingsBar/SettingsBar.js\";\nimport \"./App.css\";\n\nconst numPoints = 15;\nconst r = 180;\nconst size = 20;\nconst duration = 5;\nconst backgroundColors = [\"#F05\", \"#85F\", \"#0CF\", \"\t#32CD32\", \"#F05\"];\nconst degs = [0, 90, 270, 360];\n\nconst arrNumPoints = Array.from({ length: numPoints }, (_, i) => i);\n\nconst circleCoords = () => {\n  let coords = [];\n  for (let i = 0; i < 360; i++) {\n    const rad = (i * Math.PI) / 180;\n    coords.push([Math.cos(rad) * r, Math.sin(rad) * r]);\n  }\n  return coords;\n};\n\nconst convert = (ratio, copy = circleCoords()) =>\n  copy.concat(copy.splice(0, ratio * 360));\n\nconst getCoords = (i) => {\n  const coordsOrdered = convert(i / numPoints);\n  const x = coordsOrdered.map((set) => set[0]);\n  const y = coordsOrdered.map((set) => set[1]);\n\n  return [x, y];\n};\n\nfunction App() {\n  const [settings, setSettings] = useState({\n    backgroundColors,\n    degs,\n    duration,\n    size,\n  });\n  return (\n    <div className=\"app\">\n      <div className=\"graphics-container\">\n        {arrNumPoints.map((point) => (\n          <Square coords={getCoords(point)} key={point} settings={settings} />\n        ))}\n      </div>\n\n      <SettingsBar settings={settings} setSettings={setSettings} />\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App.js\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}